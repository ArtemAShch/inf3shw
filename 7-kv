1) Public, protected, private. 
   При public наследовании: private -> недоступен, public -> public, protected -> protected;
   При protected наследовании: private -> недоступен, public -> protected, protected -> protected.
   При private наследовании: private -> недоступен, public -> private, protected -> private.
   
2) Ключевое слово protected может использоваться, например, для определения конструктора по умолчанию не абстрактного класса,
   чтобы дочерние классы могли его использовать в своих конструкторах, но для остальных он был недоступен.
   
3) Ключевые слова
   virtual – нужно чтобы вызывался самый младший из перегруженных методов/конструкторов.
   override – указывает компилятору, что функция должна являться переопределением. Если вдруг это не так, он выдаст ошибку.
   final – нужен для указания компилятору, что данное определение функции является итоговым. При попытке ещё раз 
   переопределить её он выдаст ошибку.
   
4) Чистая виртуальная функция – та, у которой нет определения внутри класса. Синтаксис: typename_T function_name() = 0; 
   Класс, имеющий хотя бы одну чистую виртуальную функцию, не может быть сконструирован вне дочернего класса (т.е. невозможно создать его объект)
   и называется абстрактным классом.
   Абстрактный (виртуальный) базовый класс используется во избежание раздвоения базового класса при множественном наследовании.
   Представляет собой абстрактный класс, наследуемый с модификатором virtual.
 
5) При множественном наследовании возникает проблема неоднозначности. Когда класс копируется во внука два и более раз,
   непонятно, какой именно метод деда использовать в том или ином случае.
   Также с каждой новой ступенью возрастает вероятность ошибок.
   В Java множественное наследование запрещено.
